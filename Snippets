 {
    "Print Line": {
        "prefix": "sout",
        "body": [
            "System.out.println($1);"
        ],
        "description": "Imprime no console"
    },
    "Print Variable": {
        "prefix": "soutv",
        "body": [
            "System.out.println(\"$1 = \" + $1);"
        ],
        "description": "Imprime variável no console"
    },
    "Main Method": {
        "prefix": "main",
        "body": [
            "public static void main(String[] args) {",
            "    $0",
            "}"
        ],
        "description": "Método main"
    },
    "Integer Variable": {
        "prefix": "vari",
        "body": [
            "int ${1:nome} = ${2:0};"
        ],
        "description": "Declaração de inteiro"
    },
    "Double Variable": {
        "prefix": "vard",
        "body": [
            "double ${1:nome} = ${2:0.0};"
        ],
        "description": "Declaração de double"
    },
    "Float Variable": {
        "prefix": "varf",
        "body": [
            "float ${1:nome} = ${2:0f};"
        ],
        "description": "Declaração de float"
    },
    "Boolean Variable": {
        "prefix": "varb",
        "body": [
            "boolean ${1:nome} = ${2:false};"
        ],
        "description": "Declaração de boolean"
    },
    "String Variable": {
        "prefix": "vars",
        "body": [
            "String ${1:nome} = \"${2}\";"
        ],
        "description": "Declaração de string"
    },
    "Char Variable": {
        "prefix": "varc",
        "body": [
            "char ${1:nome} = '${2}';"
        ],
        "description": "Declaração de char"
    },
    "For Loop": {
        "prefix": "fori",
        "body": [
            "for (int ${1:i} = 0; ${1:i} < ${2:10}; ${1:i}++) {",
            "    $0",
            "}"
        ],
        "description": "Loop for com índice"
    },
    "Foreach Loop": {
        "prefix": "iter",
        "body": [
            "for (${1:Tipo} ${2:item} : ${3:array}) {",
            "    $0",
            "}"
        ],
        "description": "Loop foreach"
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if (${1:condicao}) {",
            "    $0",
            "}"
        ],
        "description": "Estrutura if"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condicao}) {",
            "    $2",
            "} else {",
            "    $0",
            "}"
        ],
        "description": "Estrutura if-else"
    },
    "If Not Null": {
        "prefix": "ifn",
        "body": [
            "if (${1:variavel} != null) {",
            "    $0",
            "}"
        ],
        "description": "Verifica se variável não é nula"
    },
    "Switch Statement": {
        "prefix": "switch",
        "body": [
            "switch (${1:variavel}) {",
            "    case ${2:valor}:",
            "        $0",
            "        break;",
            "    default:",
            "        break;",
            "}"
        ],
        "description": "Estrutura switch"
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "while (${1:condicao}) {",
            "    $0",
            "}"
        ],
        "description": "Loop while"
    },
    "Do-While Loop": {
        "prefix": "dowhile",
        "body": [
            "do {",
            "    $0",
            "} while (${1:condicao});"
        ],
        "description": "Loop do-while"
    },
    "Try-Catch": {
        "prefix": "try",
        "body": [
            "try {",
            "    $0",
            "} catch (${1:Exception} ${2:e}) {",
            "    e.printStackTrace();",
            "}"
        ],
        "description": "Estrutura try-catch"
    },
    "Import Scanner": {
        "prefix": "scan",
        "body": [
            "import java.util.Scanner;",
            "Scanner ${1:scanner} = new Scanner(System.in);"
        ],
        "description": "Import e criação do Scanner"
    },
    "Scanner NextLine": {
        "prefix": "nextline",
        "body": [
            "${1:String} ${2:nome} = ${3:scanner}.nextLine();"
        ],
        "description": "Ler linha do Scanner"
    },
    "Scanner NextInt": {
        "prefix": "nextint",
        "body": [
            "int ${1:nome} = ${2:scanner}.nextInt();"
        ],
        "description": "Ler inteiro do Scanner"
    },
    "Scanner NextDouble": {
        "prefix": "nextdouble",
        "body": [
            "double ${1:nome} = ${2:scanner}.nextDouble();"
        ],
        "description": "Ler double do Scanner"
    }
}
